[  {    "type": "GET",    "url": "/api/1.0/registrant",    "title": "Find Registrants",    "name": "FindRegistrantView",    "group": "RegistrantGroup",    "permission": [      {        "name": "superuser"      }    ],    "version": "1.0.0",    "examples": [      {        "title": "Example Usage",        "content": "curl --request GET \\\n--url http://discovery.chronicled.com/api/1.0/registrant \\\n-H 'Authorization: Bearer $JWT' \\",        "type": "curl"      }    ],    "filename": "../../Chronicled/server-components/lib/Blockchain/routers/v2/registrant/index.js",    "groupTitle": "Registrant",    "groupDescription": "<p>These are the Registrant endpoints</p>",    "description": "<p>Allows users to view all organizations they have access to</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The authorization token for the request. Should be in the format of &quot;Bearer $JWT&quot;</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"ethereum-mainnet\"",              "\"quorum-local\"",              "\"hyperledger-iot-alliance\""            ],            "optional": true,            "field": "blockchain_id",            "description": "<p>Used to find Organizations that have Registrants on a specific blockchain</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "-",            "description": "<p>List of Organizations</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "-.name",            "description": "<p>Name of the Registrant</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": true,            "field": "-.description",            "description": "<p>A description of the Registrant</p>"          },          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "-.destination_blockchains",            "description": "<p>The blockchains the Registrant has been deployed to</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n[\n  {\n    \"blockchain_ids\": [\"ethereum-mainnet\"]\n    \"blockchain_addresses\": [\n      \"0xc257274276a4e539741ca11b590b9447b26a8051\"\n    ]\n    \"name\": \"Apple\",\n    \"description\": \"A technology company\",\n    \"destination_blockchains\": [{\n      \"blockchain_id\": \"ethereum-mainnet\",\n      \"address\": \"0x048875e897b5877e5cdbec601a0ec3069880fe9f\",\n      \"is_multi_access\": true,\n      \"co_owner_addresses\": [\n        \"0xc257274276a4e539741ca11b590b9447b26a8051\"\n      ]\n    }]\n  }\n]",          "type": "json"        }      ]    }  },  {    "type": "GET",    "url": "/api/1.0/registrant/:id",    "title": "Get a Registrant",    "name": "ReadRegistrantView",    "group": "RegistrantGroup",    "permission": [      {        "name": "superuser"      }    ],    "version": "1.0.0",    "examples": [      {        "title": "Example Usage",        "content": "curl --request GET \\\n--url http://discovery.chronicled.com/api/1.0/registrant/0x048875e897b5877e5cdbec601a0ec3069880fe9f \\\n-H 'Authorization: Bearer $JWT' \\",        "type": "curl"      }    ],    "filename": "../../Chronicled/server-components/lib/Blockchain/routers/v2/registrant/index.js",    "groupTitle": "Registrant",    "groupDescription": "<p>These are the Registrant endpoints</p>",    "description": "<p>Allows users to read an organizations they have access to</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>Blockchain address that is used to identify an organization</p>"          }        ]      }    },    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The authorization token for the request. Should be in the format of &quot;Bearer $JWT&quot;</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>Name of the Registrant</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": true,            "field": "description",            "description": "<p>A description of the Registrant</p>"          },          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "destination_blockchains",            "description": "<p>The blockchains the Registrant has been deployed to</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"blockchain_ids\": [\"ethereum-mainnet\"]\n  \"blockchain_addresses\": [\n    \"0xc257274276a4e539741ca11b590b9447b26a8051\"\n  ]\n  \"name\": \"Apple\",\n  \"description\": \"A technology company\",\n  \"destination_blockchains\": [{\n    \"blockchain_id\": \"ethereum-mainnet\",\n    \"address\": \"0x048875e897b5877e5cdbec601a0ec3069880fe9f\",\n    \"is_multi_access\": true,\n    \"co_owner_addresses\": [\n      \"0xc257274276a4e539741ca11b590b9447b26a8051\"\n    ]\n  }]\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "NotAuthorized",            "description": "<p>the client making the request is not authorized to read the OrganizationView</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"10004\",\n  \"message\": \"Not authorized to perform this operation\",\n}",          "type": "json"        }      ]    }  },  {    "type": "POST",    "url": "/api/1.0/registrant",    "title": "Create a Registrant",    "name": "RegistrantCreation",    "group": "RegistrantGroup",    "permission": [      {        "name": "superuser"      }    ],    "version": "1.0.0",    "examples": [      {        "title": "Example Usage",        "content": "curl --request POST \\\n--url http://discovery.chronicled.com/api/1.0/registrant \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $JWT' \\\n--data '{\n   \"name\": \"Apple\",\n   \"description\": \"A technology company\",\n   \"destination_blockchains\": [{\n     \"name\": \"ethereum-mainnet\"\n   }]\n}'",        "type": "curl"      }    ],    "filename": "../../Chronicled/server-components/lib/Blockchain/routers/v2/registrant/index.js",    "groupTitle": "Registrant",    "groupDescription": "<p>These are the Registrant endpoints</p>",    "description": "<p>By supplying an organization_id, a superuser can create an Open Registry Registrant for that organization by supplying the necessary fields</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The authorization token for the request. Should be in the format of &quot;Bearer $JWT&quot;</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>The name of the Registrant</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "description",            "description": "<p>A description of the Registrant</p>"          },          {            "group": "Parameter",            "type": "Object[]",            "optional": false,            "field": "destination_blockchains",            "description": "<p>an array of the blockchains the registrants are deployed to</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"ethereum-mainnet\"",              "\"quorum-local\"",              "\"hyperledger-iot-alliance\""            ],            "optional": false,            "field": "destination_blockchains.blockchain_id",            "description": "<p>the id of the destination blockchain</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "destination_blockchains.address",            "description": "<p>the address for the registrant for an already deployed acccount. If none is provided, one will automatically be created</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "destination_blockchains.is_multi_access",            "defaultValue": "false",            "description": "<p>A boolean which indicates whether the address points to a multi-access contract or not</p>"          },          {            "group": "Parameter",            "type": "String[]",            "optional": true,            "field": "destination_blockchains.co_owner_addresses",            "description": "<p>the addresses for co-owners of the account if the address points to a multi-access contract</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Successful Response",          "content": "{\n  \"__v\":0,\n  \"updated_at\":\"2016-08-05T20:39:33.236Z\",\n  \"__t\":\"RegistrantCreation\",\n  \"_id\":\"avkMAvS\",\n  \"created_at\":\"2016-08-05T20:39:33.234Z\" ,\n  \"registrant\": {\n    \"name\": \"Apple\",\n    \"description\": \"A technology company\",\n    \"destination_blockchains\": [{\n      \"blockchain_id\": \"ethereum-mainnet\"\n      \"address\":\"0x123\",\n      \"is_multi_access\": \"false\"\n    }]\n  }\n}",          "type": "json"        }      ],      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "registrant",            "description": "<p>Field which contains the newly created registrant that was submitted by the client</p>"          }        ]      }    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "MissingProperty",            "description": "<p>The new Registrant was missing a required property</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "InvalidProperty",            "description": "<p>The parameter that was supplied for the new Registrant was not valid</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "NotAuthorized",            "description": "<p>The client is not authorized to make a new Registrant under that organization</p>"          }        ]      },      "examples": [        {          "title": "MissingProperty",          "content": " HTTP/1.1 400 Bad Request\n\n{\n \"error\":\"10001\",\n \"message\":\"Provided parameter is invalid\",\n \"detail\":\"The property 'destination_blockchains' is missing\"\n }",          "type": "json"        },        {          "title": "InvalidProperty",          "content": " HTTP/1.1 400 Bad Request\n\n{\n \"error\":\"10001\",\n \"message\":\"Provided parameter is invalid\",\n \"detail\":\"The value ${destination_blockchains} for destination_blockhains is not valid. Reason: The value supplied is not an array\n }",          "type": "json"        },        {          "title": "NotAuthorized",          "content": " HTTP/1.1 400 Bad Request\n{\n \"error\":\"10004\",\n \"message\":\"Provided parameter is invalid\",\n    \"detail\": \"Not authorized. Entity 'Registrant', id 'n/a', permission 'create'.\"\n }",          "type": "json"        }      ]    }  },  {    "type": "GET",    "url": "/api/1.0/thing",    "title": "Find Things",    "name": "FindThingDetailsView",    "group": "RegistryThingGroup",    "version": "1.0.0",    "permission": [      {        "name": "anon,user,admin,superuser"      }    ],    "examples": [      {        "title": "Example Usage",        "content": "curl --request GET \\\n--url http://discovery.chronicled.com/api/1.0/thing",        "type": "curl"      }    ],    "filename": "../../Chronicled/server-components/lib/Registry/router/v2/thing/index.js",    "groupTitle": "Thing",    "groupDescription": "<p>These are the Thing endpoints</p>",    "description": "<p>This endpoint is used to find all Thing records that match a specific query</p>",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "-",            "description": "<p>list of Thing objects in response</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "_.spec_name",            "description": "<p>The name of the Spec this Thing adheres to</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "_.registrant_address",            "description": "<p>the address of the registrant the Thing belongs to</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "_.urn_identities",            "description": "<p>array of of urns that identify the thing</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "_.thing",            "description": "<p>field that contains more information about the the Thing</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "_.registrant",            "description": "<p>field that contains information about the Organization the Spec belongs to</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "_.spec",            "description": "<p>field that contains information about the Spec the Thing belongs to</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "_.[blockchain_records]",            "description": "<p>object that contains the blockchain metadata for the Thing</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "_.[blockchain_records.ethereum-mainnet]",            "description": "<p>object that contains the blockchain metadata for the Thing on ethereum-mainnet</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "_.[blockchain_records.quorum-local]",            "description": "<p>object that contains the blockchain metadata for the Thing on qourum-local</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "_.[blockchain_records.hyperledger-iot-alliance]",            "description": "<p>object that contains the blockchain metadata for the Thing on hyperledger-iot-alliance</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n[{\n \"registrant_address\": \"0xc257274276a4e539741ca11b590b9447b26a8051\",\n \"urn_identities\": [\"urn:protocol:123\"],\n \"spec_name\": \"product\",\n \"thing\": {\n   \"urn_identities\": [\"urn:protocol:123\"],\n   \"properties\": {\n     \"product\": {\n       \"title\": \"Nike Shoes 1\",\n       \"subtitle\": \"Cool Shoes\"\n     }\n   }\n },\n \"spec\": {\n   \"name\": \"product\",\n   \"json_schema\": {\n     \"type\": \"object\",\n     \"properties\": {\n       \"title\": {\"type\": \"string\"}\n       \"subtitle\": {\"type\": \"string\"}\n     }\n   }\n }\n \"blockchain_records\": {\n   \"ethereum-mainnet\": {\n     \"state\": \"pending\",\n     \"state_description\": \"transaction: \\\"0xb79b7aba96e60d53fa324a5863cc14d9ee2fcdc3fb10bfe0d0195936b764e5c8\\\"\",\n     \"transaction_hash\": \"0xb79b7aba96e60d53fa324a5863cc14d9ee2fcdc3fb10bfe0d0195936b764e5c8\",\n     \"history\": [\n       {\n         \"state_description\": \"transaction: \\\"0xb79b7aba96e60d53fa324a5863cc14d9ee2fcdc3fb10bfe0d0195936b764e5c8\\\"\",\n         \"state\": \"pending\",\n         \"date\": \"2017-04-11T16:57:23.113Z\",\n         \"transaction_hash\": \"0xb79b7aba96e60d53fa324a5863cc14d9ee2fcdc3fb10bfe0d0195936b764e5c8\",\n         \"_id\": \"58ed0af30f49637f1eb120aa\"\n       }\n     ],\n     \"explorer_thing_link\": \"http://explorer.chronicled.org/#/thing/urn:protocol:123\",\n     \"explorer_transaction_link\": \"http://explorer.chronicled.org/#/transaction/0xb79b7aba96e60d53fa324a5863cc14d9ee2fcdc3fb10bfe0d0195936b764e5c8\"\n   }\n },\n \"registrant\": {\n   \"name\": \"Apple\",\n   \"description\": \"A technology company\",\n   \"destination_blockchains\": [{\n     \"blockchain_id\": \"ethereum-mainnet\"\n     \"address\":\"0x123\",\n     \"is_multi_access\": \"false\"\n   }]\n },\n}]",          "type": "json"        }      ]    }  },  {    "type": "GET",    "url": "/api/1.0/thing/:id",    "title": "Read a Thing",    "name": "ReadThingDetailsView",    "group": "RegistryThingGroup",    "version": "1.0.0",    "permission": [      {        "name": "anon,user,admin,superuser"      }    ],    "examples": [      {        "title": "Example Usage",        "content": "curl --request GET \\\n--url http://discovery.chronicled.com/api/1.0/thing/nfc:1.0:AFE204250",        "type": "curl"      }    ],    "filename": "../../Chronicled/server-components/lib/Registry/router/v2/thing/index.js",    "groupTitle": "Thing",    "groupDescription": "<p>These are the Thing endpoints</p>",    "description": "<p>This endpoint is used to request all the information available about a Thing by supplying one of the Thing's identifying URN's as the id parameter</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the urn_identity that maps to one recorded Thing</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": ".spec_name",            "description": "<p>The name of the Spec this Thing adheres to</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": ".registrant_address",            "description": "<p>the address of the registrant the Thing belongs to</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": ".urn_identities",            "description": "<p>array of of urns that identify the thing</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": ".thing",            "description": "<p>field that contains more information about the the Thing</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": ".registrant",            "description": "<p>field that contains information about the Organization the Spec belongs to</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": ".spec",            "description": "<p>field that contains information about the Spec the Thing belongs to</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": ".[blockchain_records]",            "description": "<p>object that contains the blockchain metadata for the Thing</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": ".[blockchain_records.ethereum-mainnet]",            "description": "<p>object that contains the blockchain metadata for the Thing on ethereum-mainnet</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": ".[blockchain_records.quorum-local]",            "description": "<p>object that contains the blockchain metadata for the Thing on qourum-local</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": ".[blockchain_records.hyperledger-iot-alliance]",            "description": "<p>object that contains the blockchain metadata for the Thing on hyperledger-iot-alliance</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n \"thing_id\": \"ayi21Z\",\n \"registrant_address\": \"0xc257274276a4e539741ca11b590b9447b26a8051\",\n \"urn_identities\": [\"urn:protocol:123\"],\n \"spec_name\": \"product\",\n \"thing\": {\n   \"urn_identities\": [\"urn:protocol:123\"],\n   \"properties\": {\n     \"product\": {\n       \"title\": \"Nike Shoes 1\",\n       \"subtitle\": \"Cool Shoes\"\n     }\n   }\n },\n \"spec\": {\n   \"name\": \"product\",\n   \"json_schema\": {\n     \"type\": \"object\",\n     \"properties\": {\n       \"title\": {\"type\": \"string\"}\n       \"subtitle\": {\"type\": \"string\"}\n     }\n   }\n }\n \"blockchain_records\": {\n   \"ethereum-mainnet\": {\n     \"state\": \"pending\",\n     \"state_description\": \"transaction: \\\"0xb79b7aba96e60d53fa324a5863cc14d9ee2fcdc3fb10bfe0d0195936b764e5c8\\\"\",\n     \"transaction_hash\": \"0xb79b7aba96e60d53fa324a5863cc14d9ee2fcdc3fb10bfe0d0195936b764e5c8\",\n     \"history\": [\n       {\n         \"state_description\": \"transaction: \\\"0xb79b7aba96e60d53fa324a5863cc14d9ee2fcdc3fb10bfe0d0195936b764e5c8\\\"\",\n         \"state\": \"pending\",\n         \"date\": \"2017-04-11T16:57:23.113Z\",\n         \"transaction_hash\": \"0xb79b7aba96e60d53fa324a5863cc14d9ee2fcdc3fb10bfe0d0195936b764e5c8\",\n         \"_id\": \"58ed0af30f49637f1eb120aa\"\n       }\n     ],\n     \"explorer_thing_link\": \"http://explorer.chronicled.org/#/thing/urn:protocol:123\",\n     \"explorer_transaction_link\": \"http://explorer.chronicled.org/#/transaction/0xb79b7aba96e60d53fa324a5863cc14d9ee2fcdc3fb10bfe0d0195936b764e5c8\"\n   }\n },\n \"registrant\": {\n   \"name\": \"Apple\",\n   \"description\": \"A technology company\",\n   \"destination_blockchains\": [{\n     \"blockchain_id\": \"ethereum-mainnet\"\n     \"address\":\"0x123\",\n     \"is_multi_access\": \"false\"\n   }]\n },\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "InstanceNotFound",            "description": "<p>the id supplied does not match an existing transaction</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Invalid Request\n{\n  \"error\": \"10020\",\n  \"message\": \"Instance not found. Entity 'Thing' with urn 'urn:value:invalid'.\"\n}",          "type": "json"        }      ]    }  },  {    "type": "POST",    "url": "/api/1.0/thing",    "title": "Create Things",    "name": "ThingCreation",    "group": "RegistryThingGroup",    "version": "1.0.0",    "permission": [      {        "name": "user,admin,superuser"      }    ],    "examples": [      {        "title": "Example Usage for Single Thing",        "content": "curl --request POST \\\n--url http://discovery.chronicled.com/api/1.0/thing \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $JWT' \\\n--data '{\n   \"urn_identities\": [\"urn:protocol:123\"],\n   \"registrant_address\": \"0xc257274276a4e539741ca11b590b9447b26a8051\",\n   \"spec_name\": \"product\",\n   \"properties\": {\n     \"title\": \"Nike Shoes 1\"\n     \"subtitle\": \"Cool Shoes\"\n   }\n}'",        "type": "curl"      },      {        "title": "Example Usage for Multiple Things",        "content": "curl --request POST \\\n--url http://discovery.chronicled.com/api/1.0/thing \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $JWT' \\\n--data '{\n   \"multiple\": true,\n   \"urn_identities\": [\n     [\"ble:1.0:abc\", \"pbk:ec:secp256r1:abc\"],\n     [\"ble:1.0:def\", \"pbk:ec:secp256r1:def\"]\n     [\"ble:1.0:efg\", \"pbk:ec:secp256r1:efg\"]\n   ],\n   \"registrant_address\": \"0xc257274276a4e539741ca11b590b9447b26a8051\",\n   \"spec_name\": \"product_chronicled\",\n   \"properties\": {\n     \"title\": \"Nike Shoes 1\"\n     \"subtitle\": \"Cool Shoes\"\n   },\n}'",        "type": "curl"      }    ],    "filename": "../../Chronicled/server-components/lib/Registry/router/v2/thing/index.js",    "groupTitle": "Thing",    "groupDescription": "<p>These are the Thing endpoints</p>",    "description": "<p>Allows an user with access to an Organization to create a Thing or multiple Things for that Organization. The <code>spec_name</code> and <code>spec_organization_id</code> combination fetches a Spec, whose <code>json_schema</code> field determines what values can be supplied in the <code>properties</code> field of the Thing and the <code>sync</code> parameter determines what fields in <code>properties</code> are synchronized with a Blockchain. See <a href=\"#api-SpecGroup\">Create Spec</a> for more details about the Spec resource</p>",    "success": {      "examples": [        {          "title": "Successful Response for Thing",          "content": "{\n  \"__v\":0,\n  \"updated_at\":\"2016-08-05T20:39:33.236Z\",\n  \"__t\":\"ThingCreation\",\n  \"_id\":\"avkMAvS\",\n  \"created_at\":\"2016-08-05T20:39:33.234Z\",\n  \"things\": [{\n    \"urn_identities\": [\"urn:protocol:123\"],\n    \"registrant_address\": \"0xc257274276a4e539741ca11b590b9447b26a8051\",\n    \"spec_name\": \"product_chronicled\",\n    \"properties\": {\n      \"title\": \"Nike Shoes 1\"\n      \"subtitle\": \"Cool Shoes\"\n    }\n  }],\n  \"failed_things\": []\n}",          "type": "json"        },        {          "title": "Successful Response for Multiple Things",          "content": "{\n  \"__v\":0,\n  \"updated_at\":\"2016-08-05T20:39:33.236Z\",\n  \"__t\":\"ThingCreation\",\n  \"_id\":\"avkMAvS\",\n  \"created_at\":\"2016-08-05T20:39:33.234Z\",\n  \"things\": [{\n    \"urn_identities\": [\"ble:1.0:abc\", \"pbck:ec:secp256r1:abc\"],\n    \"spec_name\": \"product\",\n    \"registrant_address\": \"0xc257274276a4e539741ca11b590b9447b26a8051\",\n    \"properties\": {\n      \"title\": \"Nike Shoes 1\"\n      \"subtitle\": \"Cool Shoes\"\n    },\n  }, {\n    \"urn_identities\": [\"ble:1.0:def\", \"pbk:ec:secp256r1:def\"]\n    \"spec_name\": \"product_chronicled\",\n    \"registrant_address\": \"0xc257274276a4e539741ca11b590b9447b26a8051\",\n    \"properties\": {\n        \"title\": \"Nike Shoes 1\"\n        \"subtitle\": \"Cool Shoes\"\n    },\n  }],\n  \"failed_things\": [{\n    \"urn_identities\": [\"ble:1.0:efg\", \"pbk:ec:secp256r1:efg\"],\n    \"reason_for_failure\": \"The urns provided are in use by another existing thing\"\n  }]\n}",          "type": "json"        }      ],      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "things",            "description": "<p>Field which contains the newly created Things that were submitted by the client</p>"          },          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "failed_things",            "description": "<p>Field which contains the the list of Things that failed to be created, with their urns and reason_for_failure provided</p>"          }        ]      }    },    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The authorization token for the request. Should be in the format of &quot;Bearer $JWT&quot;</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Boolean",            "optional": false,            "field": "multiple",            "defaultValue": "false",            "description": "<p>Flag that specifies whether multiple things should be created or just one</p>"          },          {            "group": "Parameter",            "type": "String[]",            "optional": false,            "field": "urn_identities",            "description": "<p>An Array of URNS which uniquely identify this thing. Must be unique across all Things</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "registrant_address",            "description": "<p>The address of the Registrant the Thing will be deployed under</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "spec_name",            "description": "<p>The field which references the Spec that this thing is registered under</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "properties",            "description": "<p>An object that contains the property and value pairs for the Thing</p>"          }        ]      }    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "MissingProperty",            "description": "<p>The Thing was missing a required property</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "InvalidProperty",            "description": "<p>The parameter that was supplied for the new Thing was not valid</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "NotAuthorized",            "description": "<p>The client is not authorized to make a new Thing under that organization</p>"          }        ]      },      "examples": [        {          "title": "MissingProperty",          "content": " HTTP/1.1 400 Bad Request\n\n{\n \"error\":\"10001\",\n \"message\":\"Provided parameter is invalid\",\n \"detail\":\"The property 'urn_identities' is missing\"\n }",          "type": "json"        },        {          "title": "InvalidProperty",          "content": " HTTP/1.1 400 Bad Request\n\n{\n \"error\":\"10001\",\n \"message\":\"Provided parameter is invalid\",\n \"detail\":\"The value ${spec_name} for spec_name is not valid. Reason: The spec_name does not match a spec on record\"\n }",          "type": "json"        },        {          "title": "NotAuthorized",          "content": " HTTP/1.1 400 Bad Request\n{\n \"error\":\"10004\",\n \"message\":\"Provided parameter is invalid\",\n \"detail\": \"Not authorized. Entity 'Thing', id 'n/a', permission 'create'.\"\n }",          "type": "json"        }      ]    }  },  {    "type": "GET",    "url": "/api/1.0/registrant/:registrant_address/spec",    "title": "Find Specs",    "name": "FindSpecViews",    "group": "SpecGroup",    "permission": [      {        "name": "user, admin, superuser"      }    ],    "version": "2.0.0",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "registrant_address",            "description": "<p>The address of the Registrant that the Specs are registered with</p>"          }        ]      }    },    "examples": [      {        "title": "Example Usage",        "content": "curl --request GET \\\n--url http://discovery.chronicled.com/api/1.0/registrant/0xc257274276a4e539741ca11b590b9447b26a8051/spec \\\n-H 'Authorization: Bearer $JWT' \\",        "type": "curl"      }    ],    "filename": "../../Chronicled/server-components/lib/Registry/router/v2/spec/index.js",    "groupTitle": "Spec",    "groupDescription": "<p>These are Spec endpoints</p>",    "description": "<p>Allows a user to view all the Specs they have access to</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The authorization token for the request. Should be in the format of &quot;Bearer $JWT&quot;</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "-",            "description": "<p>List of Specs</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "-.name",            "description": "<p>The name of the Spec registered (must be unique within your organization)</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "-.registrant_address",            "description": "<p>The address of the registrant that the Spec belongs to</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "-.json_schema",            "description": "<p>The JSON schema that identifies the properties that Things adhering to this spec possess</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "-.registrant",            "description": "<p>Field which contains the Registrant information that the Spec belongs to</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "-.sync",            "description": "<p>An object which identifies which properties in the Spec json_schema will be synchronized with a blockchain. See Spec Creation for more details.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n[\n {\n   \"name\": \"product\",\n   \"registrant_address\": \"0xc257274276a4e539741ca11b590b9447b26a8051\",\n   \"json_schema\": {\n     \"type\": \"object\"\n     \"properties\": {\n       \"title\": {\"type\": \"string\"},\n       \"subtitle\": {\"type\": \"string\"}\n     },\n   },\n   \"sync\": {\n     \"ethereum-mainneet\": {\n       \"protobuf_json\": {\n         \"package\": \"Product\",\n         \"messages\": [{\n           \"name\": \"Product\",\n           \"fields\": [\n             {\"rule\": \"required\", \"type\": \"string\", \"name\": \"title\", \"id\": 1},\n             {\"rule\": \"required\", \"type\": \"string\", \"name\": \"subtitle\", \"id\": 2}\n           ]\n         }]\n       }\n     }\n   },\n   \"registrant\": {\n     \"name\": \"Apple\",\n     \"description\": \"A technology company\",\n     \"destination_blockchains\": [{\n       \"blockchain_id\": \"ethereum-mainnet\"\n       \"address\":\"0x123\",\n       \"is_multi_access\": \"false\"\n     }]\n   }\n }\n]",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "NotAuthorized",            "description": "<p>the client making the request is not authorized to search the SpecView</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found\n{\n  \"error\": \"10004\",\n  \"message\": \"Not authorized to perform this operation\",\n  \"detail\": \"Not Authorized. Entity 'Registry-SpecView', id 'n/a', permission 'find'.\"\n}",          "type": "json"        }      ]    }  },  {    "type": "GET",    "url": "/api/1.0/registry-specview",    "title": "Find Specs",    "name": "FindSpecViews",    "group": "SpecGroup",    "permission": [      {        "name": "user, admin, superuser"      }    ],    "version": "1.0.0",    "examples": [      {        "title": "Example Usage",        "content": "curl --request GET \\\n--url http://discovery.chronicled.com/api/1.0/registry-specview \\\n-H 'Authorization: Bearer $JWT' \\",        "type": "curl"      }    ],    "filename": "../../Chronicled/server-components/lib/Registry/views/spec-view/index.js",    "groupTitle": "Spec",    "groupDescription": "<p>These are Spec endpoints</p>",    "description": "<p>Allows a user to view all the Specs they have access to</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The authorization token for the request. Should be in the format of &quot;Bearer $JWT&quot;</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "-",            "description": "<p>List of Specs</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "-.name",            "description": "<p>The name of the Spec registered (must be unique within your organization)</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "-.registrant_address",            "description": "<p>The address of the registrant that the Spec belongs to</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "-.json_schema",            "description": "<p>The JSON schema that identifies the properties that Things adhering to this spec possess</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "-.registrant",            "description": "<p>Field which contains the Registrant information that the Spec belongs to</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "-.sync",            "description": "<p>An object which identifies which properties in the Spec json_schema will be synchronized with a blockchain. See Spec Creation for more details.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n[\n {\n   \"name\": \"product\",\n   \"registrant_address\": \"0xc257274276a4e539741ca11b590b9447b26a8051\",\n   \"json_schema\": {\n     \"type\": \"object\"\n     \"properties\": {\n       \"title\": {\"type\": \"string\"},\n       \"subtitle\": {\"type\": \"string\"}\n     },\n   },\n   \"sync\": {\n     \"ethereum-mainneet\": {\n       \"protobuf_json\": {\n         \"package\": \"Product\",\n         \"messages\": [{\n           \"name\": \"Product\",\n           \"fields\": [\n             {\"rule\": \"required\", \"type\": \"string\", \"name\": \"title\", \"id\": 1},\n             {\"rule\": \"required\", \"type\": \"string\", \"name\": \"subtitle\", \"id\": 2}\n           ]\n         }]\n       }\n     }\n   },\n   \"registrant\": {\n     \"name\": \"Apple\",\n     \"description\": \"A technology company\",\n     \"destination_blockchains\": [{\n       \"blockchain_id\": \"ethereum-mainnet\"\n       \"address\":\"0x123\",\n       \"is_multi_access\": \"false\"\n     }]\n   }\n }\n]",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "NotAuthorized",            "description": "<p>the client making the request is not authorized to search the SpecView</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found\n{\n  \"error\": \"10004\",\n  \"message\": \"Not authorized to perform this operation\",\n  \"detail\": \"Not Authorized. Entity 'Registry-SpecView', id 'n/a', permission 'find'.\"\n}",          "type": "json"        }      ]    }  },  {    "type": "GET",    "url": "/api/1.0/registrant/:registrant_address/spec/:name",    "title": "Read a Spec",    "name": "ReadSpecViewByOrg",    "group": "SpecGroup",    "permission": [      {        "name": "user, admin, superuser"      }    ],    "version": "1.0.0",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "registrant_address",            "description": "<p>The address of the Registrant that the Spec is registered with</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>The name of the spec</p>"          }        ]      }    },    "examples": [      {        "title": "Example Usage",        "content": "curl --request GET \\\n--url http://discovery.chronicled.com/api/1.0/registrant/0xc257274276a4e539741ca11b590b9447b26a8051/spec/product \\\n-H 'Authorization: Bearer $JWT' \\",        "type": "curl"      }    ],    "filename": "../../Chronicled/server-components/lib/Registry/router/v2/spec/index.js",    "groupTitle": "Spec",    "groupDescription": "<p>These are Spec endpoints</p>",    "description": "<p>Allows a user to read a Spec they have access to</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The authorization token for the request. Should be in the format of &quot;Bearer $JWT&quot;</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>The name of the Spec registered (must be unique within your organization)</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "registrant_address",            "description": "<p>The addresss of the registrant that the Spec belongs to</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "json_schema",            "description": "<p>The JSON schema that identifies the properties that Things adhering to this spec possess</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "registrant",            "description": "<p>Field which contains the Registrant information that the Spec belongs to</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "sync",            "description": "<p>An object which identifies which properties in the Spec json_schema will be synchronized with a blockchain</p>"          }        ]      },      "examples": [        {          "title": "Successful response ",          "content": "{\n  \"name\": \"product\",\n  \"registrant_address\": \"0xc257274276a4e539741ca11b590b9447b26a8051\",\n  \"json_schema\":  {\n    \"meta_schema\" : \"https://github.com/epoberezkin/ajv/blob/master/lib/refs/json-schema-v5.json\",\n    \"type\" : \"object\",\n    \"properties\" : {\n      \"name\" : { \"type\" : \"string\"},\n      \"description\" : { \"type\" : \"string\"}\n    },\n    \"required\" : [ \"name\", \"description\" ]\n  },\n  \"sync\": {\n    \"ethereum-mainnet\": {\n      \"protobuf_json\": {\n        \"package\": \"Product\",\n        \"messages\": [{\n          \"name\": \"Product\",\n          \"fields\": [\n            {\"rule\": \"required\", \"type\": \"string\", \"name\": \"title\", \"id\": 1},\n            {\"rule\": \"required\", \"type\": \"string\", \"name\": \"subtitle\", \"id\": 2}\n          ]\n        }]\n      }\n    }\n  }\n  \"registrant\": {\n    \"name\": \"Apple\",\n    \"description\": \"A technology company\",\n    \"destination_blockchains\": [{\n      \"blockchain_id\": \"ethereum-mainnet\"\n      \"address\":\"0x123\",\n      \"is_multi_access\": \"false\"\n    }]\n  }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "NotAuthorized",            "description": "<p>the client making the request is not authorized to read the organizationUsersView</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "InstanceNotFound",            "description": "<p>the id supplied does not match an existing transaction</p>"          }        ]      },      "examples": [        {          "title": "NotAuthorized:",          "content": "HTTP/1.1 400 Bad Request\n{\n  \"error\": \"10004\",\n  \"message\": \"Not authorized to perform this operation\",\n  \"detail\": \"Not Authorized. Entity 'Registry-SpecView', id 'n/a', permission 'read'.\"\n}",          "type": "json"        }      ]    }  },  {    "type": "POST",    "url": "/api/1.0/registrant/:registrant_address/spec",    "title": "Create Spec",    "name": "SpecCreation",    "group": "SpecGroup",    "version": "1.0.0",    "permission": [      {        "name": "user,admin,superuser"      }    ],    "examples": [      {        "title": "Example Usage for creating a Spec",        "content": "curl --request POST \\\n--url http://discovery.chronicled.com/api/1.0/registrant/0xc257274276a4e539741ca11b590b9447b26a8051/spec \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $JWT' \\\n--data '{\n   \"name\": \"product\",\n   \"json_schema\": {\n     \"type\": \"object\",\n     \"properties\": {\n       \"title\": {\"type\": \"string},\n       \"subtitle\": {\"type\": \"string}\n     },\n   },\n   \"sync\": {\n     \"ethereum-mainnet\": {\n       \"protobuf_json\": {\n         \"package\": \"Product\",\n         \"messages\": [{\n           \"name\": \"Product\",\n           \"fields\": [\n             {\"rule\": \"required\", \"type\": \"string\",\"name\": \"title\",\"id\": 1 }, \n             {\"rule\": \"required\", \"type\": \"string\",\"name\": \"subtitle\", \"id\": 2}\n           ]\n         }]\n       }\n     }\n   }\n}'",        "type": "curl"      }    ],    "filename": "../../Chronicled/server-components/lib/Registry/router/v2/spec/index.js",    "groupTitle": "Spec",    "groupDescription": "<p>These are Spec endpoints</p>",    "description": "<p>Allows a user with access to an organization to create a Spec for that Organization. The Spec document is used to limit what kind of NewThings a user can create and determine how that NewThings is synchronized with the blockchain. The <code>json_schema</code> field is used to validate the structure of the <code>properties</code> field in all NewThings that are created with that Spec. The <code>sync</code> field is used to determine which blockchains the NewThings will be stored on. One option that can be seen below is the <code>ethereum</code> field. The `ethereum field must be supplied with a protobuf_json to encode that data and, if present, will automatically register the NewThings on the Ethereum blockchain</p>",    "success": {      "examples": [        {          "title": "Successful Response for creating a Spec ",          "content": "{\n  \"__v\":0,\n  \"updated_at\":\"2016-08-05T20:39:33.236Z\",\n  \"__t\":\"SpecCreation\",\n  \"_id\":\"avkMAvS\",\n  \"created_at\":\"2016-08-05T20:39:33.234Z\" \n  \"spec\": {\n    \"_id\": \"a31Ahz\",\n    \"name\": \"product\",\n    \"registrant_address\": \"0xc257274276a4e539741ca11b590b9447b26a8051\",\n    \"json_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"title\": {\"type\": \"string\"},\n        \"subtitle\": {\"type\": \"string\"}\n      },\n    },\n    \"sync\": {\n      \"ethereum-mainnet\": {\n        \"protobuf_json\": {\n          \"package\": \"Product\",\n          \"messages\": [{\n            \"name\": \"Product\",\n            \"fields\": [\n              {\"rule\": \"required\", \"type\": \"string\", \"name\": \"title\", \"id\": 1},\n              {\"rule\": \"required\", \"type\": \"string\", \"name\": \"subtitle\", \"id\": 2}\n            ]\n          }]\n        }\n      }\n    }\n  }\n}",          "type": "json"        }      ],      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "spec",            "description": "<p>Field which contains the newly created Spec</p>"          }        ]      }    },    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "Authorization",            "description": "<p>The authorization token for the request. Should be in the format of &quot;Bearer $JWT&quot;</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "registrant_address",            "description": "<p>The address of the registrant that the Schema belongs to</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>The name of the Schema registered (must be unique within your organization)</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "json_schema",            "description": "<p>The JSON schema that identifies the properties that Things adhering to this Schema possess</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "sync",            "description": "<p>An object which identifies which properties in the Schema specs will be synchronized with a blockchain</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": true,            "field": "sync.ethereum-mainnet",            "description": "<p>An object for identifying properties on the Schema specs that will be synchronized with ethereum-mainnet. Each key in this object identifies the property in the Schema specs that is registered and the type represents that type of value it will be registered as</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": true,            "field": "sync.ethereum-mainnet.protobuf_json",            "description": "<p>A protobuf object used to encode the data for ethereum-mainnet, must be provided if syncing with ethereum-mainnet</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": true,            "field": "sync.quorum-local",            "description": "<p>An object for identifying properties on the Schema specs that will be synchronized with quorum-local. Each key in this object identifies the property in the Schema specs that is registered and the type represents that type of value it will be registered as</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": true,            "field": "sync.quorum-local.protobuf_json",            "description": "<p>A protobuf object used to encode the data for quorum-local, must be provided if syncing with ethereum-mainnet</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": true,            "field": "sync.hyperledger-iot-alliance",            "description": "<p>An object for identifying properties on the Schema specs that will be synchronized with hyperledger-iot-alliance. Each key in this object identifies the property in the Schema specs that is registered and the type represents that type of value it will be registered as</p>"          }        ]      }    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "MissingProperty",            "description": "<p>The new Spec was missing a required property</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "InvalidProperty",            "description": "<p>The parameter that was supplied for the new Spec was not valid</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "NotAuthorized",            "description": "<p>The client is not authorized to make a new Spec under that organization</p>"          }        ]      },      "examples": [        {          "title": "MissingProperty",          "content": " HTTP/1.1 400 Bad Request\n\n{\n \"error\":\"10001\",\n \"message\":\"Provided parameter is invalid\",\n \"detail\":\"The property 'json_schema' is missing\"\n }",          "type": "json"        },        {          "title": "InvalidProperty",          "content": " HTTP/1.1 400 Bad Request\n\n{\n \"error\":\"10001\",\n \"message\":\"Provided parameter is invalid\",\n \"detail\":\"The value ${json_schema} for json_schema is not valid. Reason: The json_schema could not be compiled\"\n }",          "type": "json"        },        {          "title": "NotAuthorized",          "content": " HTTP/1.1 400 Bad Request\n{\n \"error\":\"10004\",\n \"message\":\"Provided parameter is invalid\",\n    \"detail\": \"Not authorized. Entity 'Spec', id 'n/a', permission 'create'.\"\n }",          "type": "json"        }      ]    }  },  {    "name": "Challenges",    "group": "ThingGroupsComponent",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "user_id",            "description": "<p>User ID or &quot;anon&quot; of the person who requested the challenge (REVIEW: should we track who also submits the verification?)</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "signature",            "description": "<p>See TagVerificationRequestedVerificationEvent parameter description</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "challenge",            "description": "<p>See TagVerificationRequestedChallengeEvent parameter description</p>"          },          {            "group": "Parameter",            "type": "Date",            "optional": false,            "field": "challenge_expiration",            "description": "<p>Milliseconds since epoch when the challenge expires.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "urn",            "description": "<p>See TagVerificationRequestedChallengeEvent parameter description</p>"          },          {            "group": "Parameter",            "type": "enum",            "optional": false,            "field": "result",            "description": "<p>See TagVerificationRequestedVerificationEvent parameter description</p>"          },          {            "group": "Parameter",            "type": "enum",            "optional": false,            "field": "reason_for_failure",            "description": "<p>See TagVerificationRequestedVerificationEvent parameter description</p>"          }        ]      }    },    "version": "1.0.0",    "type": "",    "url": "",    "filename": "../../Chronicled/server-components/lib/Registry/entities/challenge.js",    "groupTitle": "ThingGroupsComponent"  }]
